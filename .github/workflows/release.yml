name: "Release build"

on:
  push:
    branches: [ "dev" ]

concurrency:
  group: "release"
  cancel-in-progress: false

jobs:
  build:
    name: Build

    outputs:
      appVersion: ${{ steps.tauri_build.outputs.appVersion }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            artifact: "macOS"
            args: "-t universal-apple-darwin"
            path: "/Users/runner/work/Books/Books/src-tauri/target/universal-apple-darwin/release/bundle/"
          - platform: "ubuntu-22.04"
            artifact: "Linux"
            args: ""
            path: "/home/runner/work/Books/Books/src-tauri/target/release/bundle/appimage/"
          - platform: "windows-latest"
            artifact: "Windows"
            args: ""
            path: "D:\\a\\Books\\Books\\src-tauri\\target\\release\\bundle\\msi\\"

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.*

      - name: Setup node and cache pnpm
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install macOS targets
        if: runner.os == 'macOS'
        run: rustup target add aarch64-apple-darwin x86_64-apple-darwin

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install Dependencies
        run: pnpm install

      - name: Set environment file (unix)
        if: runner.os != 'Windows'
        run: echo "SENTRY_DSN=\"${{ secrets.SENTRY_DSN }}\"" >> ./src-tauri/.env
          
      - name: Set environment file (windows)
        if: runner.os == 'Windows'
        run: echo "SENTRY_DSN=`"${{ secrets.SENTRY_DSN }}`"" | Out-File -Append ./src-tauri/.env

      - uses: tauri-apps/tauri-action@v0
        id: tauri_build
        env:
          TAURI_FIPS_COMPLIANT: true
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tauriScript: "pnpm tauri"
          updaterJsonKeepUniversal: true
          args: ${{ matrix.args }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          overwrite: true
          path: ${{ matrix.path }}

  create_release:
    name: Create release

    needs: [build]

    permissions:
      contents: write

    outputs:
      appVersion: ${{ needs.build.outputs.appVersion }}
      release_id: ${{ steps.create_release.outputs.result }}

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Create Release Draft
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `books-v${{ needs.build.outputs.appVersion }}`,
              name: `Books v${{ needs.build.outputs.appVersion }}`,
              draft: true
            })
            return data.id
  
  upload_release:
    name: Upload release

    needs: [create_release]

    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Books_${{ needs.create_release.outputs.appVersion }}_x64.AppImage"
            artifact: "Linux"
            content_type: "application/x-appimage"
            path: "Books_${{ needs.create_release.outputs.appVersion }}_amd64.AppImage"
          - name: "Books_${{ needs.create_release.outputs.appVersion }}_universal.dmg"
            artifact: "macOS"
            content_type: "application/x-diskcopy"
            path: "dmg/Books_${{ needs.create_release.outputs.appVersion }}_universal.dmg"
          - name: "Books_${{ needs.create_release.outputs.appVersion }}_x64.msi"
            artifact: "Windows"
            content_type: "application/x-msdownload"
            path: "Books_${{ needs.create_release.outputs.appVersion }}_x64_en-US.msi"

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ./build/${{ matrix.artifact }}

      - name: Upload Assets
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './build/${{ matrix.artifact }}/${{ matrix.path }}';
            const stat = fs.statSync(path);
            const file = fs.readFileSync(path);

            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create_release.outputs.release_id }},
              name: '${{ matrix.name }}',
              data: file,
              headers: {
                'content-type': '${{ matrix.content_type }}',
                'content-length': stat.size
              }
            })

  create_update:
    name: Create update

    needs: [build]
    
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: Linux
          path: ./build/Linux

      - name: Download artifacts (macOS)
        uses: actions/download-artifact@v4
        with:
          name: macOS
          path: ./build/macOS

      - name: Download artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: Windows
          path: ./build/Windows

      - name: Select artifact
        uses: actions/github-script@v7
        env:
          APP_VERSION: ${{ needs.build.outputs.appVersion }}
        with:
          script: |
            const fs = require('fs');
            const out_path = `./updater_artifact/`;
            const version = process.env.APP_VERSION;
            fs.mkdirSync(out_path, { recursive: true });

            const artifacts = [
              {
                artifact: 'Linux',
                installer: `./build/Linux/Books_${version}_amd64.AppImage`,
                signature: `./build/Linux/Books_${version}_amd64.AppImage.sig`
              },
              {
                artifact: 'macOS',
                installer: `./build/macOS/macos/Books.app.tar.gz`,
                signature: `./build/macOS/macos/Books.app.tar.gz.sig`
              },
              {
                artifact: 'Windows',
                installer: `./build/Windows/Books_${version}_x64_en-US.msi`,
                signature: `./build/Windows/Books_${version}_x64_en-US.msi.sig`
              }
            ];

            for (const artifact of artifacts) {
              fs.copyFileSync(artifact.installer, `${out_path}/${artifact.installer.split('/').pop()}`);
              fs.copyFileSync(artifact.signature, `${out_path}/${artifact.signature.split('/').pop()}`);
            }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: updater_artifact
          overwrite: true
          path: ./updater_artifact/
  
  upload_update:
    name: Upload update

    needs: [create_update]

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    permissions:
      pages: write
      id-token: write

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: updater_artifact
          path: ./updater_artifact/

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './updater_artifact/'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4